app.define("plugins://validator",
function(require, exports, module) {
	var _c, validator = function(a) {
		return new validator.fn._d(a)
	},
	_a = window,
	_b = _a.document;
	return validator.fn = validator.prototype,
	_c = {
		_d: function(a) {
			var b = _b.getElementById(a.formId);
			this.selector = a.formId,
			this.form = b,
			this.checked = !1,
			this.rules = {},
			this.configs = {
				Prefix: "sujui-validator",
				Submit: !0
			},
			b && this._p(a.rules, a.config)
		},
		_e: [],
		_f: [],
		_g: function(a, b) {
			for (i in a) b && b(i, a[i])
		},
		_h: function(a, b) {
			for (var c = 0,
			d = a.length; d > c; c++) b && b(c, a[c])
		},
		_i: function(a) {
			if ("" == a) return '""';
			if (!isNaN(a)) return /^0[0-9]+$/.test(a) ? '"' + a + '"': a;
			var b = a.toLowerCase;
			return "false" == b || "true" == b || "null" == b ? a: '"' + a + '"'
		},
		_j: function(a, b) {
			for (var c = 0,
			d = a.length; d > c; c++) if (a[c] == b) return c;
			return - 1
		},
		_k: function(a, b) {
			var c = this._j(a, b);
			c > -1 && a.splice(c, 1)
		},
		_l: function(a, b) {
			var c = _a.XMLHttpRequest ? new XMLHttpRequest: new ActiveXObject("Microsoft.XMLHTTP");
			c.onreadystatechange = function() {
				4 == c.readyState && 200 == c.status && b && b(c.responseText)
			},
			c.open("POST", a, !0),
			c.send()
		},
		_m: function(a, b) {
			return a ? a.replace(/{(\w+)}/g,
			function(a, c) {
				return b[c] || ""
			}) : ""
		},
		_n: function(a, b, c, d) {
			var e = b.parentNode,
			f = _b.createElement("span");
			f.id = a,
			f.className = c,
			f.innerHTML = d,
			e.lastChild == b ? e.appendChild(f, b) : e.insertBefore(f, b.nextSibling)
		},
		_o: function(a, b, c, d) {
			var e, f, g, h, i, j;
			return "hidden" != b.type && "radio" != b.type ? (e = this, f = e.configs.Prefix, g = f + "-" + e.selector + "-" + a, h = _b.getElementById(g), i = '<span class="' + f + "-msg " + f + "-" + d + '">' + c + "</span>", h ? h.innerHTML = i: e._n(g, b, f, i), j = "error" == d ? !1 : !0, this._e[a] = j, h = null, j) : void 0
		},
		add: function(a) {
			return this.form ? this._p(a) : this
		},
		del: function(a) {
			var b = this;
			return b.form && (a = Array == a.constructor ? a: [a], b._h(a,
			function(a, c) {
				b.rules[c] && delete b.rules[c],
				b._k(b._f, c)
			})),
			this
		},
		_p: function(a, b) {
			var c = this;
			return b && (c.configs = b),
			c._g(a,
			function(a, b) {
				c._f.push(a),
				c.rules[a] = b
			}),
			c._h(c.form.elements,
			function(a, b) {
				c._j(c._f, b.name) > -1 && (b.onfocus = function() {
					c._g(c.rules,
					function(d, e) {
						d == b.name && e.Focus && c._o(a, b, c._m(e.Focus, {
							label: e.label
						}), "focus")
					})
				},
				b.onblur = function() {
					c._q(a, b)
				},
				c._g(c.rules,
				function(d, e) {
					d == b.name && e.Default && c._o(a, b, c._m(e.Default, {
						label: e.label
					}), "default")
				}))
			}),
			this.form.onsubmit = function() {
				var a, b;
				return c._h(c.form.elements,
				function(a, b) {
					c._j(c._f, b.name) > -1 && c._q(a, b)
				}),
				a = c.configs.Submit,
				b = c._j(c._e, !1) > -1 ? !1 : !0,
				c.checked = b,
				a ? "function" == typeof a ? a(c) || !1 : a: b
			},
			this
		},
		_q: function(a, b) {
			var c = this,
			n = b.name;
			c._g(c.rules,
			function(p, q) {
				var msg, matchs, form, to, fn, fun, url;
				if (n === p && "hidden" != b.type) {
					if (q.Required && (value = "checkbox" == b.type || "radio" == b.type ? b.checked ? !0 : !1 : b.value, !value)) return c._o(a, b, c._m(q.Required, {
						label: q.label
					}), "error");
					if (q.Length && (b.value.length < q.Length.min || b.value.length > q.Length.max)) return msg = q.Length.msg,
					msg = c._m(msg, {
						min: q.Length.min,
						max: q.Length.max,
						label: q.label
					}),
					c._o(a, b, msg, "error");
					if (q.Regexp && (matchs = new RegExp(q.Regexp.reg).test(b.value), matchs = q.Regexp.compare ? !matchs: matchs, !matchs)) return c._o(a, b, c._m(q.Regexp.msg, {
						label: q.label
					}), "error");
					if (q.Equal) {
						if (form = c.form.elements, to = form[q.Equal.to], !to) return;
						if (to = 2 == to.length ? to[0] : to, eval("compare = " + c._i(b.value) + " " + q.Equal.reg + " " + c._i(to.value) + " ? true : false;"), !compare) return c._o(a, b, c._m(q.Equal.msg, {
							label: q.label
						}), "error")
					}
					if (q.Callback) {
						if (fn = q.Callback.fun, "function" != typeof fn) return;
						if (fun = fn(b.value), !fun) return c._o(a, b, c._m(q.Callback.msg, {
							label: q.label
						}), "error")
					}
					q.Ajax && (url = q.Ajax.url, _l(url,
					function(responseText) {
						var reg = q.Ajax.reg || "==";
						return eval("compare = " + c._i(responseText) + " " + q.Ajax.reg + " " + c._i(b.value) + " ? true : false;"),
						compare ? void 0 : c._o(a, b, c._m(q.Ajax.msg, {
							label: q.label
						}), "error")
					})),
					c._o(a, b, "", "success")
				}
			})
		}
	},
	validator.fn = _c,
	validator.fn._d.prototype = validator.fn,
	validator
});